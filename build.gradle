plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

version =  property("mod.version") + "+" + stonecutter.current.version
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.gegy.dev' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.isxander.dev/releases' }
    maven { url 'https://repo.inventivetalent.org/repository/public/' }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

loom {
    accessWidenerPath = getRootProject().file("src/main/resources/aw/" + stonecutter.current.version + ".accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('deps.loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

    modLocalRuntime modCompileOnly("maven.modrinth:modmenu:${property('runtime.modmenu')}")
    modLocalRuntime modCompileOnly("maven.modrinth:entitytexturefeatures:${property('runtime.etf')}")

    include implementation('com.konghq:unirest-java:3.11.09:standalone')

    include modImplementation("dev.lambdaurora:spruceui:${property('deps.spruceui')}")
    modImplementation(include("dev.isxander:yet-another-config-lib:${property('deps.yacl')}"))

    include implementation("org.jsoup:jsoup:1.16.1")
    include implementation("org.mineskin:java-client:1.2.4-SNAPSHOT")
    include implementation("commons-validator:commons-validator:1.7")

    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.2.0")
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'mod_version': version,
                'target_minecraft': project.property('mod.target'),
                'target_yacl': project.property('deps.yacl'),
                'loader_version': project.property('deps.loader'),
                'minecraft_version': stonecutter.current.version
    }
}

java {
    var version = stonecutter.eval(stonecutter.current.version, ">1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
